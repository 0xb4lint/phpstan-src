#!/usr/bin/env php
<?php declare(strict_types=1);

use PHPStan\Command\AnalyseCommand;
use PHPStan\Command\ClearResultCacheCommand;
use PHPStan\Command\DumpDependenciesCommand;
use PHPStan\Command\WorkerCommand;

(function () {
	error_reporting(E_ALL);
	ini_set('display_errors', 'stderr');
	gc_disable(); // performance boost

	define('__PHPSTAN_RUNNING__', true);

	$devOrPharLoader = require_once __DIR__ . '/../vendor/autoload.php';
	require_once __DIR__ . '/../preload.php';
	$devOrPharLoader->unregister();

	$GLOBALS['__composer_autoload_files'] = [];

	$autoloaderInWorkingDirectory = getcwd() . '/vendor/autoload.php';
	$composerAutoloaderProjectPaths = [];
	if (is_file($autoloaderInWorkingDirectory)) {
		$composerAutoloaderProjectPaths[] = dirname($autoloaderInWorkingDirectory, 2);

		require_once $autoloaderInWorkingDirectory;
	}

	$autoloadProjectAutoloaderFile = function (string $file) use (&$composerAutoloaderProjectPaths): void {
		$path = dirname(__DIR__) . $file;
		if (!extension_loaded('phar')) {
			if (is_file($path)) {
				$composerAutoloaderProjectPaths[] = dirname($path, 2);

				require_once $path;
			}
		} else {
			$pharPath = \Phar::running(false);
			if ($pharPath === '') {
				if (is_file($path)) {
					$composerAutoloaderProjectPaths[] = dirname($path, 2);

					require_once $path;
				}
			} else {
				$path = dirname($pharPath) . $file;
				if (is_file($path)) {
					$composerAutoloaderProjectPaths[] = dirname($path, 2);

					require_once $path;
				}
			}
		}
	};

	$autoloadProjectAutoloaderFile('/../../autoload.php');

	$devOrPharLoader->register(true);

	$version = 'Version unknown';
	try {
		$version = \Jean85\PrettyVersions::getVersion('phpstan/phpstan')->getPrettyVersion();
	} catch (\OutOfBoundsException $e) {

	}

	$application = new \Symfony\Component\Console\Application(
		'PHPStan - PHP Static Analysis Tool',
		$version
	);

	$reversedComposerAutoloaderProjectPaths = array_reverse($composerAutoloaderProjectPaths);
	$application->add(new AnalyseCommand($reversedComposerAutoloaderProjectPaths));
	$application->add(new DumpDependenciesCommand($reversedComposerAutoloaderProjectPaths));
	$application->add(new WorkerCommand($reversedComposerAutoloaderProjectPaths));
	$application->add(new ClearResultCacheCommand($reversedComposerAutoloaderProjectPaths));
	$application->run();
})();
